void bfs(int row, int col, vector<vector<int>> &visited, vector<vector<char>>&grid){
    visited[row][col] = 1;
    queue<pair<int, int>>q;
    q.push({row,col});
    
    int n = grid.size();
    int m = grid[0].size();
    
    while(!q.empty()){
        int row = q.front().first;
        int col = q.front().second;
        q.pop();
        
        for(int delrow = -1 ; delrow <= 1; delrow++){
            for(int delcol = -1; delcol <= 1; delcol++){
           if(abs(delrow) != abs(delcol)){
                
                int nrows = row + delrow;
             int ncols =  col + delcol; 
             
             if(nrows>=0 && nrows<n &&ncols>=0 && ncols<m && !visited[nrows][ncols]
               && grid[nrows][ncols] == '1'){
                 visited[nrows][ncols] = 1;
                 q.push({nrows, ncols});
             }  
            }
        }
    }
    }    
}
    int numIslands(vector<vector<char>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        
    vector<vector<int>>visited(n, vector<int>(m, 0));
    int count = 0; 
    for(int row = 0; row<n; row++){
        for(int col = 0; col<m; col++){
         if( !visited[row][col] && grid[row][col] == '1'){
          count++;
          bfs(row, col, visited, grid);   
         }
        }
    }    
       return count; 
    }
